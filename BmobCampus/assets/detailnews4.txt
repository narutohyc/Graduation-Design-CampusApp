前言

对于理工 科学生来说，这个答案可能很简单，因为这是一门必修课。而对于程序员来说选择一门编程语言，在某种程度上，对职业生涯的发展会产生重大的影响，所以必须慎 之又慎。那么，为什么要选择一门诞生了将近半个世纪的语言？本文不是老生常谈的废话，如：”C 语言是编程的基础”、”学好 C 语言，走遍天下都不怕”等等，本文力争详尽而又有理的回答这个问题，旨在成为最好的为什么要学习和使用 C 的文章。

一、工欲善其事，必先利其器
这里介绍几个学习C语言必备的装置和书籍：
A）开发环境
例如turbo C 2.0,这个曾经占据了DOS时代开发程序的大半个江山。但是现在windows时代，用turbo C有感觉不方面，编辑程序起来很吃力，并且拖放，更没有函数变量自动感应功能，查询参考资料也不方便。建议使用Visual C++,这个平台虽然体积大，但是一旦安装好了，用起来很方便。
B）一本学习教程
现在C语言教材多如牛毛，推荐大家使用《C语言程序设计》第二版。此书很适合初学者，并且内容也很精到。
C）利用辅助学习软件
毕竟现在是Windows时代了，学习软件多如牛毛，这里向大家推荐一个“集成学习环境(C语言)”，里边的知识点总结和例程讲解都非常好，有好几千题的题库测试环境，包括一个windows下的trubo C，初学者甚至不用装其它的编译器，就可以练习编程了。还有一个“C语言学习系统”软件，不过感觉只是一个题库系统，如果你觉得题做的不够，不妨也可以试试。
二、葵花宝典
学习计算机语言最好的方法是什么？答曰：读程序。
没错，读程序是学习C语言入门最快，也是最好的方法。我们大家都应该有个体验——在最初学习windows系统操作或Microsoft words如果操作的过程中，刚开始总是正儿八经地买来教材，结果读来读去却云里雾里，而当我们将教材丢在一边，拿起鼠标反复地试，几个小时就搞定。包括学习J#,C#等其他语言，在今天的Windows时代，也不再提倡抱着书本逐行啃，而是学习它们的例程。
当然，对于没有学过任何计算机语言的初学者，多少要先阅读教程，认真体会所有概念，然后不放过这一章中提到的所有例程，仔细研读，直到每一行都理解了，再找几个编程题目，最好是和例程类似的或一样的，自己试图写出这段已经读懂的程序。如果写不出来，回过头来再继续研究例程，想想自己为什么写不出来，然后再去写这段程序，反反复复，直到你手到擒来为止。
三、登峰造极
写程序的最高境界其实就是掌握各种解决问题的手段（数据结构）和解决问题的方法（算法）。
是不是写出底层程序就是程序设计高手呢？非也，写底层程序，无非是掌握了硬件的结构，况且硬件和硬件还不一样，要给一个芯片写驱动程序，无非就是掌握这块芯片的各种寄存器及其组合，然后写值读值，仅此而已。这不过是熟悉一些I/O函数罢了。那么怎样才算精通程序设计呢？怎样才能精通程序设计呢？举个例子：
你面前有10个人，找出一个叫“张三”的人，你该怎么办？第一种方法：直接对这10个人问：“谁叫张三”。第2种方法：你挨个去问“你是不是张三？”，直到问到的这个人就是张三。第三种方法：你去问一个人“你认不认识张三，指给我看”。不要小看这个问题，你说当然会选第一种方法，那么恭喜你答对了，因为这个方法最快，效率最高，但是在程序设计中找到解决问题的最优方法和你用的手段却是考验一个程序员程序设计水平的重要标志，而且是不容易达到的。刚才这个问题类似于数据结构和算法中的：Map数据结构，穷举查找和折半查找。所以掌握好数据结构和一些常用算法，是登峰造极的必然之路。


一：
现在大一上学期应该只学一门专业课，除了数学与英语课之外，还是有很多的业余时间的，抽出一小部分去了解一些计算机的文化吧。举个例子吧，比如计算”机科学之父”，艾伦.图灵的生平啊什么的，了解一下他是如何以一个数学家的身份去首次提出图灵思想的，再比如他是如何创造性的提出“机器可以思考吗”这样子的论文而开创了AI的先河的。
这是说了一个人物的了解吧，再比如你可以去了解一下计算机的发展历史啊，比如第一台计算机是在1946年诞生于美国的宾夕法尼亚大学的；再或是去了解一下你们的C语言的发展史，等等等等，这些东西没有必要刻意的去看，兴趣来了偶尔去百度一下子，会开阔一下见识与思维的，而且还可以增加自己对相关领域的兴趣程度。
这些知识如果要系统的细看的话，可以去看<计算机导论>，或是<计算机科学概论>这两本书讲的是比较系统的，都是简单的提一下计算机科学体系吧，没有深入的讲解部分。

二：
计算机科学知识的学习是最注重循序渐进的，注重基础的，万万不可跳跃性的学习，当然你是天才或是个别的话我只能膜拜了，至少我是一步一个脚印学过来的。我们不讨论哪一门语言才适合做大学计算机相关专业的第一门编程课的问题，我们是C语言，也听说很多学校都是以C语言为第一门编程语言对待的，我想大部分都是吧。那我们就把C语言尽自己的最大努力学好吧，有一些学弟学妹会问一些问题，自己不会敲代码怎么办？还有人会说能看懂别人写的代码，但是自己就是敲不出来。
这些问题我曾经也遇到过吧，首先要明确一个观念：C语言不难学，一点都不难学。这门课程不需要那么多的动脑筋的地方，就我感觉还没有数学难呢，当然这仅仅是一孔之见吧。入门一个语言最重要的是要选择一本好书，一本能够以最简单的描述来表达出基本知识的书，我想很多国内的首学C的人会选择谭老的C吧，我当时也不例外，因为毕竟是国人写的书，在问题描述与问题展开与循序讲解的过程中透漏的思考问题的方式都是符合国人思考方式的，所以易于理解吧，当然如果喜欢读外国的名著当然也是可以的，比如C之父的<C Programing Language>，这当然是传世经典之作了。
还要明确一个观念是：谭老的书仅仅是作为一个最基本语法的讲解书，看完谭老的书后确实会把很多语法细节学到，但是这也仅仅是语法，只能保证你会用这些语法了，你是知其然而不知其所以然。看完谭老的书后最好把<C Programing Language>这本书看看，而且更要仔细的看，这个时候有了基础后看起来会轻松一些的，会发现有很多原理性的讲解了，而且会有一些谭老书中讲不到的细节。看完了<C Programing Language>后会有一种小小的豁然开朗吧。
以上说的看书，过程应该是这样子的：看基本语法，看书上的例题，试着自己去敲一遍例题，即使你看懂了例题，但是让你合上书自己敲，我保证还是会出错的，肯定是某些地方理解的不够透彻，再看书，然后再敲，直到无误的敲出为止。慢慢的经过一段时间的坚持练习，会发现自己合上书后敲的时候错误越来越少了。然后是做课后的习题，最开始看懂例题去敲书后习题也是很难下手的，但是要尝试，第二次写习题就不会那么纠结了。编程容不得一点的掺假，必须要动手去敲代码，而且还要准确无误的敲出来。不可手写而不去上机验证。
还有就是培养一个习惯：先思考清楚问题，然后再去敲代码。因为我们敲代码仅仅是为了用程序设计语言把我们人的思维转换成了计算机可理解的方式了而已。有的同学会看完题目不思考就直接敲，发现总是会出一些错误，然后在那苦逼的各种改啊调试啊等等，这样子不是一个好的编程习惯。

三：
认真的看书，做练习题，敲代码。这样子下来一个学期完全可以把C语言学好的，一般性的题目是没问题的。学习了程序设计语言后会发现我们的思维在慢慢的转变，我们思考问题的方式也在更加的严谨了，这是学习编程的结果。
如果有兴趣的话可以考虑进阶了，去学习<C与指针>，<C专家编程>吧，这两本书会介绍很多在课程老师讲不到的，在一般性的书上看不到的。更多的是站在编译器的角度去看待代码，看待基本的语法了。比如编译器如何编译语言并生成可执行二进制文件的？这个编译的过程是怎样的？编译器又是如何奖产生的.exe文件交给CPU执行的？一个基本语法的规则背后肯定是和编译器的某一项工作原理是契合的，举个例子吧：大家都知道的函数中的普通变量是在函数的调用结束后悔自动销毁的，而我们在函数中定义的静态变量，也就是用static修饰的类型变量，他的内存空间在函数调用结束后是不会销毁的，这是为什么呢？这是因为编译器为我们的程序分配的内存进行了一个分类，把不同类型的变量分门别类的存储，这样子便于管理。至于变量内存空间销毁与否的区别就不在这细说了。当然两本进阶的书我是当时没有看，也是后面的学习中翻了翻的。

四：
最后不得不说的是，还要把数学学好，这个好并不是要投入很多的精力在上面，但最起码你要能独立写得出习题，考试不要分太低吧。计算机科学还是很依赖数学的，毕竟图灵与冯诺依曼两位大师都是数学家出身呢。数学更多的是培养一个思考问题的方式吧，通过做一些习题是很锻炼自己对问题的认识与整体把握的。